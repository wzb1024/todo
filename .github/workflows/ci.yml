name: CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            set -euxo pipefail
            echo "=== Starting Deployment ==="
            
            # 配置工作目录
            WORK_DIR="/home/${{ secrets.SERVER_USERNAME }}/todo"
            mkdir -p ${WORK_DIR}
            cd ${WORK_DIR}
            
            # 配置 Docker 镜像加速
            sudo mkdir -p /etc/docker
            echo '{"registry-mirrors": ["https://registry.cn-hangzhou.aliyuncs.com"]}' | sudo tee /etc/docker/daemon.json
            sudo systemctl restart docker
            
            # 克隆或更新代码（使用 SSH）
            if [ -d .git ]; then
              git fetch --all
              git reset --hard origin/main
              git pull origin main
            else
              git clone git@github.com:${{ github.repository }}.git .
            fi
            
            # 停止并清理旧容器
            docker stop todo || true
            docker rm todo || true
            docker rmi todo:latest || true
            
            # 添加 Docker Hub 登录（即使拉取公共镜像）
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            
            # 构建镜像时显式使用镜像加速
            docker build \
            --build-arg REGISTRY_MIRROR=https://registry.cn-hangzhou.aliyuncs.com \
            -t todo:latest .
            
            # 运行新容器
            docker run -d \
              --name todo \
              -p 8080:80 \
              --restart unless-stopped \
              todo:latest
            
            # 清理未使用的镜像
            docker image prune -f
            
            echo "=== Deployment Completed ==="

  build-desktop:
    needs: test
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/v')

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            pkg: .deb
            platform: linux
            build_dir: out/make/*.deb  # 更精确的路径匹配
          - os: windows-latest
            pkg: .exe
            platform: win32
            build_dir: out/make/*.exe
          - os: macos-latest
            pkg: .dmg
            platform: darwin
            build_dir: out/make/*.dmg

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install Linux Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-0 \
            libnotify4 \
            libnss3 \
            libxss1 \
            libgbm1 \
            libasound2

      - name: Install macOS Dependencies
        if: matrix.os == 'macos-latest'
        run: |
          brew install -q create-dmg

      - name: Clean Install Dependencies
        run: npm ci --force  # 强制清理异常缓存

      - name: Build Desktop App
        run: npm run make -- --platform ${{ matrix.platform }}
        env:
          NODE_OPTIONS: --max_old_space_size=4096  # 防止内存不足

      - name: Verify Build Output
        run: |
          echo "Build directory contents:"
          ls -R out/make

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: todo-${{ matrix.os }}-${{ github.ref_name }}
          path: ${{ matrix.build_dir }}
          retention-days: 7

  create-release:
    needs: build-desktop
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 必须有写入权限才能创建 Release
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') }}
          generate_release_notes: true
